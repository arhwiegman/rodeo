% Generated by roxygen2 (4.1.1): do not edit by hand
% Please edit documentation in R/solverInterface.r
\name{solverInterface}
\alias{solverInterface}
\title{Wrapping generated Fortran for use with deSolve and rootSolve}
\usage{
solverInterface(NLVL = 1, funcname = "derivs")
}
\arguments{
\item{NLVL}{The desired number of spatial levels (boxes). Defaults to 1.}

\item{funcname}{Name of the generated function that computes derivatives.}
}
\value{
A character string holding generated Fortran code. Must be written to
  disk, e.g. using \code{write} prior to compilation. The generated code
  provides two subroutines.
  The first subroutine with the fixed name 'initmod' is to be passed to
  the \code{initfunc} argument of \code{deSolve::ode} or
  \code{rootSolve::steady}, for example.
  The second subroutine is to be passed to the \code{func} argument of the
  \code{deSolve} or \code{rootSolve} methods. The subroutines names is
  created by appending the suffix '_wrapper' to the value of \code{funcname}.
  Hence, if \code{funcname} is 'derivs' (default), the subroutine name
  passed to the solver must be 'derivs_wrapped'.
}
\description{
Creates wrapper code to make \code{rodeo}-generated Fortran code compatible
with the numerical methods from packages \code{deSolve} or \code{rootSolve}.
}
\author{
David Kneis \email{david.kneis@tu-dresden.de}
}

