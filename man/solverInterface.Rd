% Generated by roxygen2 (4.1.1): do not edit by hand
% Please edit documentation in R/plainMethod_solverInterface.r
\name{solverInterface}
\alias{solverInterface}
\title{Wrapping generated Fortran for use with solver packages}
\usage{
solverInterface(NLVL = 1, funcname = "derivs")
}
\arguments{
\item{NLVL}{The desired number of spatial levels (boxes). Defaults to 1.}

\item{funcname}{Name of the function for which a wrapper is to be created
  (rather than the name for the wrapper). It is assumed that a function with
  that name was (or will be) created by a call to the \code{\link{generate}}
  class method.}
}
\value{
A character string holding generated Fortran code. Must be written to
  disk, e.g. using \code{\link[base]{write}} prior to compilation. The
  generated code provides two subroutines.
  The first subroutine with the fixed name 'initmod' is to be passed to
  the \code{initfunc} argument of, e.g., method \code{\link[deSolve]{ode}}
  (from package \code{\link[deSolve]{deSolve-package}}) or
  \code{\link[rootSolve]{steady}} (from package
  \code{\link[rootSolve]{rootSolve-package}}).
  The second subroutine is to be passed to the \code{func} argument of the
  \code{\link[deSolve]{deSolve}} or \code{\link[rootSolve]{rootSolve}}
  methods. The subroutines names is created by appending the suffix
  '_wrapper' to the value of \code{funcname}. Hence, if \code{funcname} is
  'derivs' (default), the subroutine name passed to the solver must be
  'derivs_wrapped'.
}
\description{
Creates wrapper code to make \code{rodeo}-generated Fortran code compatible
with the numerical methods from packages \code{\link[deSolve]{deSolve}} and
\code{\link[rootSolve]{rootSolve}}.
}
\author{
David Kneis \email{david.kneis@tu-dresden.de}
}

